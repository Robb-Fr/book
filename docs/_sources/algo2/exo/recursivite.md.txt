# Algorithmique II

## 5. R√©cursivit√© [en option]

### Solutions des exercices


````{exercise} 
Voir partie Apprendre.
````
````{exercise} 
Voir partie Apprendre.
````

```{exercise}  Exercice 5.3. Une question de fusion

Trier le tableau suivant avec l‚Äôalgorithme de tri par fusion : [3, 6, 8, 7, 1, 9, 4, 2, 5] √† la main. Repr√©senter l‚Äô√©tat du tableau lors de toutes les √©tapes interm√©diaires.

```


**Solution √† compl√©ter**

````{exercise}  Exercice 5.4. Dans l'autre sens üîå

En Python, proposer une fonction qui inverse l‚Äôordre des lettres dans un mot. Vous pouvez parcourir les lettres du mot directement ou √† travers un indice.

Proposer une autre fonction qui inverse l‚Äôordre des lettres dans un mot de mani√®re r√©cursive.

````



`````{solution} 

````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down

Voici plusieurs impl√©mentations it√©ratives et une r√©cursive de la fonction qui inverse un mot :

```{codeplay}

def inverser_mot_iteratif(mot) :
	mot_inverse = ""
	for lettre in mot :
		mot_inverse = lettre + mot_inverse
	return mot_inverse

def inverser_mot_iteratif_2(mot) :
	mot_inverse = ""
	for indice in range(len(mot)-1,-1,-1) :
		mot_inverse += mot[indice] 
	return mot_inverse

def inverser_mot_recursif(mot) :
	if len(mot) == 1:
		return mot
	else :
		return inverser_mot_recursif(mot[1:]) + mot[0] 

un_mot = "mot"

print(inverser_mot_iteratif(un_mot))
print(inverser_mot_iteratif_2(un_mot))
print(inverser_mot_recursif(un_mot))

```
````
`````




````{exercise}  Factorielle üîå

La fonction factorielle `n!` en math√©matiques est le produit de tous les nombres entiers jusqu‚Äô√† `n`. C‚Äôest une des fonctions les plus simples √† calculer de mani√®re r√©cursive. Elle peut √™tre d√©finie comme ceci :

	n! = (n-1)! * n

Programmer cette fonction de mani√®re r√©cursive en Python. Proposer √©galement une impl√©mentation it√©rative de la factorielle o√π les √©l√©ments de 1 √† `n` sont trait√©s l‚Äôun apr√®s l‚Äôautre.

````


`````{solution} 

````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down

Voici une impl√©mentation en Python de la fonction factorielle o√π la fonction fait appel √† elle-m√™me, sans oublier la condition d‚Äôarr√™t  :

```{codeplay}
# fonction factorielle (d√©finition r√©cursive)
def factorielle_recursive(nombre):

	if nombre == 1:
		res = 1
	else:
		res = nombre * factorielle_recursive(nombre-1)

	return res

res = factorielle_recursive(5)
print(res)

```

Voici une impl√©mentation en Python de la fonction factorielle qui n‚Äôest pas r√©cursive :

```{codeplay}

def factorielle(nombre):
	res = 1
	for n in range(2,nombre+1) :
		res = res * n
	return res

res = factorielle(5)
print(res)

```
````
`````



